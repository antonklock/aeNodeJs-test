'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _isNan = require('babel-runtime/core-js/number/is-nan');

var _isNan2 = _interopRequireDefault(_isNan);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.default = is;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This is a pain in the ass, but without it the babel transpile breaks Symbol
// checking, because Symbol !== require('babel-runtime/core-js/symbol')

/* eslint-disable no-undef, indent */
var $Symbol = (typeof window === 'undefined' ? 'undefined' : (0, _typeof3.default)(window)) === 'object' ? window.Symbol : (typeof global === 'undefined' ? 'undefined' : (0, _typeof3.default)(global)) === 'object' ? global.Symbol : _symbol2.default;

/* eslint-enable */

function is() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  // Validate value argument
  if (args.length === 0) throw new Error('is expects at least one value and optionally a variable number of type arguments');

  var value = args[0],
      types = args.slice(1);

  // Validate type arguments

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(types), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var type = _step.value;

      if (typeof type !== 'function') throw new Error('types, if supplied, are expected to be of type \'function\'');
    } // Type not supplied
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (types.length === 0) return value !== undefined && value !== null && !(0, _isNan2.default)(value);

  // Test types
  var valueType = typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = (0, _getIterator3.default)(types), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _type = _step2.value;


      if (valueType === 'string' && _type === String) return true;else if (valueType === 'boolean' && _type === Boolean) return true;else if (valueType === 'number' && _type === Number && !(0, _isNan2.default)(value)) return true;else if (valueType === 'symbol' && _type === $Symbol) return true;else if (valueType === 'function' && _type === Function) return true;else if (value instanceof _type) return true;
    } // All failed
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return false;
}